//----O que é o Bootstrap
 é uma biblioteca orientada a componentes;
Ou seja,  partes do layout já vem criadas e nos cabe alterá-las para o que desejamos;
Agilizando muito a parte de desenvolvimento front-end;
Criando tmb um padrao de grid, facilitando a exibição de conteúdo baseado
na resolução;
//----Como se programa com o Bootstrap
classes
Precisamos somente conhecer o componente, diferente de gravar
Consultar documentação
Copiar o componente e excluir o que não vamos utilizar ou criar o nosso
apartir da referencia as classes;
//----Como o js é carregado na pagina ?
O arquivo de js era colocado no final das paginas pra que o js carregasse
apos o HTML, porem hj em dia existe o recurso do defer na tag script 
que permite escrever a tag <script></script> dentro da <header></header>
e mas ainda sim carregar o js depois do HTML.
//----Instalar pelo NPM
npm init -y
npm i bootstrap

//----Configurações Importantes
Há dois elementos necessários para o correto functionamento do
Bootstrap que precisamos atentar no HTML;
DOCTYPE: O Bootstrap necessita das tags corretas de DOCTYPE;
viewport: E também da tag que controle a responsividade;
Sem estas Configurações ele pode funcionar, porem estamos sujeitos a 
instabilidades;

//----Inserindo nosso CSS
Vamos linkar sempre abaixo do BS
Nossas regras precisam ter um nivel de seleção pelo menos igual o
do BS para substitui-las;

<h1>Seção de layout</h1>
    <button class="btn btn-primary">Clica em mim</button>

    button{ /* assim não funciona*/
    background-color: blueviolet;
}

/*Voce precisa usar as classes do bootstrap*/

.btn-primary{
    background-color: blueviolet;
}

//----O que são breakpoints ?
São pontos específicos de resolução criados através de media query
para deixar o site responsivo ;
Eles seguem o padrão que é encontrado na maioria dos dispositivos;
Ou seja, temos um break point para tablet e outro para celular;
Não há para todos, mas para os mais utilizados;
Lembrando que é utilizado um padrão mobile first, ou seja, estilização
de menor resolução para maior;

//----Os breakpoints do Bootstrap

Os breakpoints do Bootstrap são utilizados por classes como: sm, md, lg;
Cada um representa uma media query;
Então normalmente adequamos outros elementos do nosso site a estes breakpoints;
Assim é possivel trabalhar com conjunto do Bootstrap e deixar o site responsivo;

O bootstrap é escrito de forma mobile first
x-small - none - celular
small - sm - celular

Medium - md - tablet

Large - lg - notebooks menores, pc de 15 polegadas

Extra large - xl - pc's, monitor que temos em casa 17 a 19 polegadas
Extra extra large - xxl - monitores grandes e tbm TV's

/* XS */ mobile first por isso XS nao tem sigla
h1{
    color: red;
}

/* SM >= 576px */

@media(min-width: 576px) {
    h1{
        color: blue;
    }
}

/* MD >= 768px */

@media(min-width: 768px) {
    h1{
        color: greenyellow;
    }
}

/* LG >= 992px */

@media(min-width: 992px) {
    h1{
        color: cyan;
    }
}

/* XL >= 1200px */

@media(min-width: 1200px) {
    h1{
        color: purple;
    }
}

/* XXL >= 1400px */

@media(min-width: 1400px) {
    h1{
        color: orangered;
    }
}

//----Containers
Containers são entidades super Importantes do Bootstrap, estruturam
o layout;
E como o nome diz são containers, depósitos de outros elementos =)
O container tem o tamanho maximo de 1320px de largura nao importando 
o tamanho da tela. Isso evita que o layout fique muito espaçado e possa
quebrar.
Temos tipos diferentes de containers, vamos ver como funciona cada um.
Mas o uso é o mesmo: separar o site em áreas.

<div class="container">
        <h2>Titulo da seção</h2>
        <p>Conteúdo do container</p>
        <p>Conteúdo do container</p>
        <p>Conteúdo do container</p>
        <p>Conteúdo do container</p>
    </div>

//----Container fluid
O container Fluid utiliza uma área maior para abrigar os elementos;
Sempre representa 100% da área útil;
Eliminando as margens laterais;
A classe é container-fluid;

//----Container por breakpoint
Podemos também moldar um container pelo breakpoint;
Utilizamos a classe container-x;
Onde x pode ser: sm, md, lg, e outras classes de breakpoint também;
Com esta versão, queremos um container que respeite uma largura máxima,
que se baseia em uma resolução.

/*Container Break point*/

.container-sm {
    margin-bottom: 30px;
    border: 2px solid blue;
}

.container-md {
    margin-bottom: 30px;
    border: 2px solid crimson;
}

.container-lg {
    margin-bottom: 30px;
    border: 2px solid chocolate;
}

//----Grid
Grid é a estrutura para criar layouts com Bootstrap;
Temos um grid colunar, dividido em 12 colunas;
A estrutura do GRid é sempre: container > row > colunas;
Onde temos o container para abrigar a seção;
Row para determinar uma linha (largura 100%);
Colunas para subdividir o container em até 12 partes;

//----Tamanho das colunas
Podemos ajustar o tamanho das colunas;
Para ocupar três espaços: col-3;
Lembrando que podemos separar em no máximo 12 divisões;
E o espaço ocupado será proporcional, ou seja, em: col-11 
e col-1 teremos uma coluna ocupando quase 100% da largura do row;

<div class="container" id="largura-limitada">
        <div class="row">
            <div class="col-4"></div>
            <div class="col-2"></div>
        </div>
        <div class="row">
            <div class="col-1"></div>
            <div class="col-11"></div>
        </div>
    </div>

    .col,
.col-4,
.col-2,
.col-1,
.col-11{
    border: 2px dashed red;
    height: 100%;
    margin: 0;
}

#largura-limitada{
    max-width: 500px;
}

//----Limitando o numero de colunas
Podemos também limitar a quantidade de colunas em uma row;
A classe a ser utilizada é: row-cols-*;
Onde * é o numero limite;
Assim o grid sempre vai respeitar este numero máximo na linha;

<!-- Limitação de colunas-->
    <div class="container">
        <div class="row row-cols-2">
            <div class="col"></div>
            <div class="col"></div>
        </div>
        <div class="row row-cols-2">
            <div class="col"></div>
            <div class="col"></div>
        </div>
        <div class="row row-cols-2">
            <div class="col"></div>
            <div class="col"></div>
        </div>
    </div>

//=========Daqui pra baixo nao foi pro anki

//=========================================

//----Alinhamento vertical bootstrap
As colunas dentro de uma row estão condicionadas ao 
flex box;
Ou seja, temos classes bem parecidas com as regras de 
flex para alinha-las;
Exemplo: alignt-items-end alinha no fim da row
Lembrando que esta classe sempre deve ficar no elemento pai (row)

<!-- Alinhamento Vertical-->
		<div class="container vertical">
			<div class="row align-items-end">
				<div class="col-6"></div>
				<div class="col-6"></div>
			</div>
		</div>

		<!-- Alinhamento ao centro-->
		<div class="container vertical">
			<div class="row align-items-center">
				<div class="col-6"></div>
				<div class="col-6"></div>
			</div>
		</div>

/*Alinhamento vertical*/

.vertical{
	height: 250px;
	border-color: coral;
}

.vertical .row {
	height: 100%;
}

.col-6 {
	height: 50px;
}

//----Alinhamento horizontal Boostrap
O alinhamento horizontal segue a mesma premissa do vertical;
Utilizamos classes no elemento pai (row) para condicionar os
items na linha horizontal;
Para centralizar elementos podemos por a classe: justify-content-
centr;
As regras end e start também funcionam;
Podemos combinar tambem vertical e horizontal;

<!-- Alinhamento horizontal -->
		<div class="container vertical">
			<div class="row align-items-center justify-content-center">
				<div class="col-3"></div>
			</div>
		</div>

//----Alinhamento de itens Boostrap
O alinhamento de item serve para alinharmos um item individualmente;
Utilizamos classes como: align-self-center;
Que alinha um elemento na vertical;
Não há alinhamento unitário para a horizontal;

<!-- Alinhamento de item -->
		<div class="container vertical">
			<div class="row">
				<div class="col-3"></div>
				<div class="col-3 align-self-center"></div>
				<div class="col-3"></div>
				<div class="col-3 align-self-center"></div>
			</div>
		</div>

		<div class="container vertical">
			<div class="row">
				<div class="col-4"></div>
				<div class="col-4 align-self-center"></div>
				<div class="col-4 align-self-end"></div>
			</div>
		</div>

//----Ordem dos itens Boostrap
É possível alterar a ordem que os itens são exibidos;
Vamos colocar a classe: order-*;
Onde * é a posição do elemento, sendo 1 o primeiro;
Este recurso é util no desenvolvimento mobile, onde os elementos 
costumam mudar a ordem;

<!-- Ordem  dos elementos-->

		<div class="container vertical">
			<div class="row">
				<div class="col-3 order-3">3</div>
				<div class="col-3 order-1">1</div>
				<div class="col-3 order-4">4</div>
				<div class="col-3 order-2">2</div>
			</div>
		</div>

//----Offset de colunas Boostrap
Podemos tambem criar um espaçamento com offset;
Ou seja, teremos uma margin da borda borda definida
por uma quantidade de colunas;
Exemplo: offset-md-3;
Neste caso temos um offset de 3 colunas a esquerda;

<!-- Offset-->

		<div class="container vertical" id="offset">
			<div class="row">
				<div class="col-md-3 offset-md-1"></div>
			</div>
			<div class="row">
				<div class="col-md-3 offset-md-2"></div>
			</div>
			<div class="row">
				<div class="col-md-3 offset-md-3"></div>
			</div>
			<div class="row">
				<div class="col-md-3 offset-md-4"></div>
			</div>
		</div>

//----Gutters Bootstrap
Os Gutters são intervalos que podemos inserir entre as colunas;
É possivel inserir no eixo x ou y;
Exemplo: gx-2 (horizontal);
Ou: gy-4 (vertical)
Os numeros quer utilizamos são baseados em rem da página, fonte
do elemento root;
O numero 3 é a referencia para 1rem;

//----Bootstrap Icons
Na versão 5 do bootstrap temos disponíveis icones em SVG e de forma
gratuita.
Isso nos possibilita na depender da biblioteca de terceiros.
Podemos usar com ou sem o bootstrap.
Pode ser instalado por npm, arquivos ou cdn.

//----Instalando os icones do Bootstrap.
Para utilizar os icones vamo utilizar a tag i
Nesta tag vamos inserir classes respectivas para exibir um
determinado icone, ex: bi bi-x-lg
Estas classes apresentam um ícone de x.
Os icones podem ser instalados independente do BS. Pra isso existe
uma CDN, Packmanager e downloads apenas para icones.
Os icones funcionam como fontes.

//----Como encontrar os icone
Sempre utilizar a documentação como referencia.
Buscamos o icone necessario.
Implementamos a suas classes e tag.
Depois podemos fazer as alterações necessárias para inserir no
projeto.
Buscar os icones em ingles. ex: sun, smilles.

//----O que são os icones
Os ícones são considerados fontes, como arial.
Ou seja, vamos alterar seu tamanho com font-size e sua cor com color.
É um elemento inline, por causa da tag i.
Então precisamos mudar o display, caso precise ser de bloco;
Alternando a cor de fundo, mudamos o fundo da tag, e não há 
alterações no ícone.